@using ExcelDataReader
@using OfficeOpenXml
@using System.IO
@using System.Text.Json
@using OdysejaAdmin.Data
@inject RestService RestService

<select @bind="_selectedCity" class="select">
    @foreach (var template in cities)
    {
        <option value=@template.id>@template.name</option>
    }
</select>
<div class="file has-name"
     style="display: inline-block;">
    <label class="file-label">
        <BlazorInputFile.InputFile class="file-input"
                                   OnChange="@ChooseFile"/>
        <span class="file-cta">
            <span class="file-icon">
                <i class="fas fa-upload"></i>
            </span>
            <span class="file-label">
                Wybierz plik…
            </span>
        </span>
        <span class="file-name">
            @name
        </span>
    </label>
</div>

<button class="button is-primary"
        @onclick="SendHarmonogram"
        style="display: inline-block;">
    Wyślij harmonogram
</button>

@code
{
    [Parameter]
    public EventCallback AfterLoad { get; set; }

    private int _selectedCity = 0;
    private List<IdNameModel> cities = new List<IdNameModel>();
    protected string name { get; set; } = "Nie wybrano pliku";
    IFileListEntry file;
    ExcelWorksheet sheet;

    protected override async void OnInitialized()
    {
        string cities = await RestService.Get("/city");
        this.cities = JsonSerializer.Deserialize<List<IdNameModel>>(cities);
        StateHasChanged();
    }

    protected async Task SendHarmonogram()
    {
        try
        {
            await BytesToExcel();
            List<Performance> performances = new List<Performance>();
            List<StageModel> stages = new List<StageModel>();
            List<Coordinate> corners = FindCorners();
            foreach (var corner in corners)
            {
                ReadStage(performances, corner, stages);
            }
            await RestService.Post("/timeTable", performances);
            await RestService.Put("/stage", stages);
            AfterLoad.InvokeAsync();
        }
        catch(Exception e)
        {
            Console.Write($"Messega: {e.Message} \n StackTrace {e.StackTrace}");
        }
    }

    private void ReadStage(List<Performance> perf, Coordinate corner, List<StageModel> stages)
    {
        int x = corner.X;
        int y = corner.Y;
        string[] stage = GetCellValue(x + 1, y).Split("-");
        int stageNumber = Int32.Parse(stage[0].Split(" ")[1]);
        stages.Add(new StageModel(0, stage[stage.Length - 1], _selectedCity, stageNumber));
        y += 2;
        int problem = 0;
        int age = 0;
        do
        {
            string val = GetCellValue(x, y);
            if (val == null)
            {
                val = GetCellValue(x + 1, y);
                string[] splited = val.Split(" ");
                problem = 0;
                try
                {
                    problem = Int32.Parse(splited[1].ToCharArray()[0].ToString());
                }
                catch (Exception e)
                {
                }
                age = Roman.RomanToInteger(splited[splited.Length - 1]);
            }
            else
            {
                string cityName = cities.Find(c => c.id == _selectedCity).name;
                Performance performance = new Performance(0,
                    cityName, GetCellValue(x + 1, y), problem, age, stageNumber,
                    GetCellValue(x, y).Substring(GetCellValue(x, y).Length >= 11 ? 11 : 0, 
                        GetCellValue(x, y).Length >= 5 ? 5 : GetCellValue(x, y).Length), 
                    GetCellValue(x + 2, y).Substring(GetCellValue(x+2, y).Length >= 11 ? 11 : 0, 
                        GetCellValue(x+2, y).Length >= 5 ? 5 : GetCellValue(x+2, y).Length));
                perf.Add(performance);
            }
            y++;
        } while (GetCellValue(x, y) != null || GetCellValue(x + 1, y) != null);
    }

    private string GetCellValue(int x, int y)
    {
        return sheet.Cells[y, x]?.Value?.ToString();
    }

    protected async Task ChooseFile(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        name = file.Name;
    }

    public List<Coordinate> FindCorners()
    {
        List<Coordinate> corners = new List<Coordinate>();
        for (int y = sheet.Dimension.Start.Row; y <= sheet.Dimension.End.Row; y++)
        {
            for (int x = sheet.Dimension.Start.Column; x <= sheet.Dimension.End.Column; x++)
            {
                try
                {
                    string currentCellValue = sheet.Cells[y, x]?.Value?.ToString();
                    if (currentCellValue == "Godzina występu") corners.Add(new Coordinate(x, y));
                }
                catch (Exception e)
                {
                }
            }
        }
        return corners;
    }

    public static async Task<byte[]> ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }

    public async Task BytesToExcel()
    {
        byte[] bin = await ReadFully(file.Data);
        MemoryStream ms = new MemoryStream(bin);
        ExcelPackage package = new ExcelPackage(ms);
        sheet = package.Workbook.Worksheets.FirstOrDefault();
    }
}